#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
from table import Table
    
class Router:
    relations = {}
    sockets = {}
    ports = {}
    routing_table: Table

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.updates = [] #added to log all the "update" type messages
        self.withdrawals = [] #added to log all the "withdraw" type messages
        self.routing_table = Table()
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({"type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}}))

    def our_addr(self, dst): # gets self's address based on another address
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        if network not in self.sockets:
            self.sockets[network] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[network].bind(('localhost', 0))
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def route_update(self, msg):
        print("message:", msg)
        self.updates.append(msg)
        self.routing_table.route_update_helper(msg)
        if self.relations[msg["src"]] == 'cust': #call relations on self, indexed by the src
            # Send updates to all other neighbors
            print("reached forward_update method(all)")
            for neighbor in self.relations.keys():
                if neighbor != msg["src"]:
                    self.forward_update(msg, neighbor)
            # self.forward_update(msg, src)
        elif self.relations[msg["src"]] == 'peer' or self.relations[msg["src"]] == 'prov':
            # Send updates to only your customers
            print("reached forward_update method(only cust)")
            for neighbor, relation in self.relations.items():
                if relation == 'cust':
                    if neighbor != msg["src"]:
                        self.forward_update(msg, neighbor)

    def forward_update(self, msg, neighbor_ip):
        ASPathnew = msg['msg']['ASPath'][:] #create a copy so we dont change the actual aspath
        if self.asn not in ASPathnew:
            ASPathnew.insert(0, self.asn)
        update_msg = { # only send the network netmask and ASPath
            "src": self.our_addr(neighbor_ip),
            "dst": neighbor_ip,
            "type": "update",
            "msg": {
                "network": msg['msg']['network'],
                "netmask": msg['msg']['netmask'],
                "ASPath": ASPathnew 
            }
        }
        print("reached send part of forward_update")
        self.send(neighbor_ip, json.dumps(update_msg))

    def withdraw(self, msg, srcif):
        # (1) save a copy of the revocation, in case you need it later
        withdrawal_messages = []
        # loop thru each withdrawal in msg, if it matches in updates, then append it to withdrawal messages
        for withdrawal in msg["msg"]:
            for i, update in self.updates(self.updates):
                if update["src"] == msg["src"] and update["msg"]["network"] == withdrawal["network"] and update["msg"]["netmask"] == withdrawal["netmask"]:
                    withdrawal_messages.append(update)
        
        # (2) remove the dead entry from the forwarding table
        for update in withdrawal_messages:
            print("Removing", update)
            self.updates.remove(update)

        self.routing_table.new_table(self.updates)

        # (3) possibly send copies of the revocation to other neighboring routers
        # followed the same logic as forward_update function

        if self.relations[msg["src"]] == 'cust': #call relations on self, indexed by the src
            # Send updates to all other neighbors
            print("reached forward_update method(all)")
            for neighbor in self.relations.keys():
                if neighbor != srcif:
                    msg["src"] = self.our_addr(neighbor)
                    msg["dst"] = neighbor
                    print("reached send part of forward_withdraw")
                    self.send(neighbor, json.dumps(msg))
            # self.forward_update(msg, src)
        elif self.relations[msg["src"]] == 'peer' or self.relations[msg["src"]] == 'prov':
            # Send updates to only your customers
            print("reached forward_update method(only cust)")
            for neighbor, relation in self.relations.items():
                if relation == 'cust':
                    if neighbor != srcif:
                        msg["src"] = self.our_addr(neighbor)
                        msg["dst"] = neighbor
                        print("reached send part of forward_withdraw")
                        self.send(neighbor, json.dumps(msg))

    def data_message(self, msg, srcif):
        #this is the no route message as given by the insrtuctions
        no_route_message = json.dumps({
            "src": self.our_addr(msg["src"]),
            "dst": msg["src"],
            "type": "no route",
            "msg": {}
        })
        find_possible_routes = self.routing_table.find_possible_routes(msg["dst"])
        # if there is a best route and srcif or final destination are customers, then send the message. Otherwise, send no route
        if find_possible_routes:
            final_destination = sorted(find_possible_routes)[0].peer
            if self.relations[srcif] == "cust" or self.relations[final_destination] == "cust":
                self.send(final_destination, json.dumps(msg))
            else:
                # if nobody can pay us for sending the message, drop it(no route message)
                self.send(srcif, no_route_message)
        else:
            # if no legal route is found, send "no route" message back to source
            self.send(srcif, no_route_message)

    def dump_message(self, msg):
        print("Handling dump message from:", msg['src'])
        dump_table_msg = {
            "src": self.our_addr(msg["src"]), # my router
            "dst": msg["src"], # the neighboring router
            "type": "table",
            "msg": self.routing_table.get_table_as_list() # will be filled by helper method
        }
        self.send(msg["src"], json.dumps(dump_table_msg))

    # calls the appropriate function based on the message "type"
    def handle_message(self, msg, srcif):
        msg = json.loads(msg)
        msg_type = msg.get("type")
        if msg_type == "update":
            print("calling route update method")
            self.route_update(msg)
        elif msg_type == "withdraw":
            print("calling route withdraw method")
            self.withdraw(msg, srcif)
        elif msg_type == "data":
            print("calling data message method")
            self.data_message(msg, srcif)
            print("data message sent(handle message version)")
        elif msg_type == "dump":
            print("calling dump and table method")
            self.dump_message(msg)
    
    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                self.handle_message(msg, srcif)
                print("Received message '%s' from %s" % (msg, srcif))
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
